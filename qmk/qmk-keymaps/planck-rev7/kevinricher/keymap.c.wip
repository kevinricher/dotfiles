/* Copyright 2015-2023 Jack Humbert
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum planck_layers {LAYER_0, LAYER_1, LAYER_2, LAYER_3};

/* clang-format off */
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
  /* LAYER_0
   * ,-----------------------------------------------------------------------------------.
   * | Esc  |   Q  |   W  |   E  |   R  |   T  |   Y  |   U  |   I  |   O  |   P  |  -   |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * | Bksp |   A  |   S  |   D  |   F  |   G  |   H  |   J  |   K  |   L  |   ;  |  '   |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * | Ctrl |   Z  |   X  |   C  |   V  |   B  |   N  |   M  |   ,  |   .  |   /  |  \   |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * | Shift| Alt  | GUI  |LT(3) | Space| TO(1)| TO(2)| Enter| Meh  |  [   |  ]   |  `   |
   * `-----------------------------------------------------------------------------------'
   */
  [LAYER_0] = LAYOUT_planck_grid(
    KC_ESC,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_MINS,
    KC_BSPC, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,
    KC_LCTL, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH, KC_BSLS,
    KC_LSFT, KC_LALT, KC_LGUI, LT(3,KC_TAB), KC_SPC, TG(1),   TG(2),   KC_ENT,  MEH_T(KC_NO), KC_LBRC, KC_RBRC, KC_GRV
  ),

  /* LAYER_1
   * ,-----------------------------------------------------------------------------------.
   * |Trans |  !   |  @   |  {   |  }   |      |      |  7   |  8   |  9   |  *   |Trans |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * |Trans |  #   |  $   |  (   |  )   |      |      |  4   |  5   |  6   |  =   |Trans |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * |Trans |  %   |  ^   |  [   |  ]   |      |      |  1   |  2   |  3   |Trans |Trans |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * |Trans |Trans |Trans |Trans |Trans | TO(0)| TO(2)|Trans |  0   |  .   |Trans |Trans |
   * `-----------------------------------------------------------------------------------'
   */
  [LAYER_1] = LAYOUT_planck_grid(
    KC_TRNS, KC_EXLM, KC_AT,   KC_LCBR, KC_RCBR, KC_NO,   KC_NO,   KC_7,    KC_8,    KC_9,    KC_ASTR, KC_TRNS,
    KC_TRNS, KC_HASH, KC_DLR,  KC_LPRN, KC_RPRN, KC_NO,   KC_NO,   KC_4,    KC_5,    KC_6,    KC_EQL,  KC_TRNS,
    KC_TRNS, KC_PERC, KC_CIRC, KC_LBRC, KC_RBRC, KC_NO,   KC_NO,   KC_1,    KC_2,    KC_3,    KC_TRNS, KC_TRNS,
    KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,   TO(2),   KC_TRNS, KC_0,    KC_DOT,  KC_TRNS, KC_TRNS
  ),

  /* LAYER_2
   * ,-----------------------------------------------------------------------------------.
   * | F1   | F2   | F3   | F4   | F5   | F6   | F7   | F8   | F9   | F10  | F11  | F12  |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * |      |      |      |      |SftGui|      |Prev |VolDn |VolUp |Next  |      |      |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * |Trans |      |      |      |      |      |      | Play | Mute |      |      | Boot |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * |Trans |Trans |Trans |      |      | TO(1)| TO(0)|      |      |      | BLtg |RGBtg |
   * `-----------------------------------------------------------------------------------'
   */
  [LAYER_2] = LAYOUT_planck_grid(
    KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,
    KC_NO,   KC_NO,   KC_NO,   KC_NO,   SGUI(KC_4), KC_NO, KC_MRWD, KC_VOLD, KC_VOLU, KC_MFFD, KC_NO,   KC_NO,
    KC_TRNS, KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_MPLY, KC_MUTE, KC_NO,   KC_NO,   QK_BOOT,
    KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,   TO(1),   KC_TRNS,   KC_NO,   KC_NO,   KC_NO,   BL_TOGG, RGB_TOG
  ),

  /* LAYER_3
   * ,-----------------------------------------------------------------------------------.
   * |      |      |      |      |      |      |      |      |      |      |       |      |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * |      |      |      |      |      |      |      | Left | Down |  Up  | Right |      |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * |      |      |      |      |      |      |      |      |      |      |       |      |
   * |------+------+------+------+------+------+------+------+------+------+------+------|
   * |      |      |      |      |      |      |      |      |      |      |       |      |
   * `-----------------------------------------------------------------------------------'
   */
  [LAYER_3] = LAYOUT_planck_grid(
    KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,  KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,
    KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,  KC_NO, KC_LEFT, KC_DOWN,   KC_UP, KC_RGHT,   KC_NO,
    KC_TRNS,   KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,  KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,
    KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,   KC_NO,  KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO
  )
};
/* clang-format on */

layer_state_t layer_state_set_user(layer_state_t state) {
    switch (get_highest_layer(state)) {
    case LAYER_1:
        rgblight_setrgb (0x00,  0x00, 0xFF);
        break;
    case LAYER_2:
        rgblight_setrgb (0xFF,  0x00, 0x00);
        break;
    case LAYER_3:
        rgblight_setrgb (0x00,  0xFF, 0x00);
        break;
    default: //  for any other layers, or the default layer
        rgblight_setrgb (0xFF,  0xFF, 0xFF);
        break;
    }
  return state;
}
