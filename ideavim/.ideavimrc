" .ideavimrc is a configuration file for IdeaVim plugin. It uses
" the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

let mapleader = " "

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins

" Highlight copied text
Plug 'machakann/vim-highlightedyank'
" Commentary plugin
Plug 'tpope/vim-commentary'
" File tree explorer
Plug 'preservim/nerdtree'
nmap <leader>n :NERDTreeToggle<CR>
let g:WhichKeyDesc_NERDTree_toggle = "<leader>n NERDTree Toggle"

set which-key
set timeoutlen=60000

""" Open and edit this file easily ----------
nmap \e :e ~/.ideavimrc<CR>
nmap \r :source ~/.ideavimrc<CR>

""" Common settings -------------------------
set scrolloff=8

set number
set relativenumber

set incsearch
set ignoresearch
set wrapscan
set showcmd

""" Idea specific settings ------------------
set ideajoin
set idearefactormode=keep
set showmode

""" Vim Mappings --------------------------------
vmap J :m '>+1<CR>gv=gv
vmap K :m '<-2<CR>gv=gv
nmap J "mzJ`z"

" Stay centered while navigating by half screen
nmap <C-d> <C-d>zz
nmap <C-u> <C-u>zz

" I don't like <C-w>
nmap <leader>ww <C-w>w
nmap <leader>wo <C-w>o
nmap <leader>wp <C-w>p
nmap <leader>wh <C-w>h
nmap <leader>wj <C-w>j
nmap <leader>wk <C-w>k
nmap <leader>wl <C-w>l

""" IDE Mappings --------------------------------
"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
" Thanks https://github.com/Infonautica

" Don't use Ex mode, use Q for formatting.
map Q gq

" Find commands
let g:WhichKeyDesc_find = "<leader>f Find"

nmap <leader>ff <Action>(GotoFile)
let g:WhichKeyDesc_find_file = "<leader>ff Find File"

nmap <leader>fr <Action>(RecentFiles)
let g:WhichKeyDesc_find_recent = "<leader>fr Find Recent File"

nmap <leader>fw <Action>(FindInPath)
let g:WhichKeyDesc_find_word = "<leader>fw Find Word"

nmap <leader>fa <Action>(GotoAction)
let g:WhichKeyDesc_find_action = "<leader>fa Find Action"


" Go to commands
let g:WhichKeyDesc_goto = "g Go To"

nmap <leader>gb <Action>(EditorMatchBrace)
let g:WhichKeyDesc_goto_matching_brace = "g Go To Matching Brace"

nmap gc <Action>(GoToClass)
let g:WhichKeyDesc_goto_class = "gd Go To Class"

nmap gd <Action>(GotoDeclaration)
let g:WhichKeyDesc_goto_definition = "gd Go To Definition"

nmap gi <Action>(GotoImplementation)
let g:WhichKeyDesc_goto_implementation = "gi Go To Implementation"

nmap gr <Action>(ShowUsages)
let g:WhichKeyDesc_goto_references = "gr Go To References"


" Git commands
let g:WhichKeyDesc_git = "<leader>g Git"

nmap <leader>gp <Action>(Vcs.QuickListPopupAction)
let g:WhichKeyDesc_git_popup = "<leader>gp Git Popup"

nmap <leader>gd <Action>(Compare.SameVersion)
let g:WhichKeyDesc_git_diff = "<leader>gd Git Diff"

nmap <leader>gr <Action>(Vcs.RollbackChangedLines)
let g:WhichKeyDesc_git_reset = "<leader>gr Git Reset"

nmap <leader>gb <Action>(Annotate)
let g:WhichKeyDesc_git_blame = "<leader>gb Git Blame"


" Close commands
let g:WhichKeyDesc_close = "<leader>x Close"

nmap <leader>xn <Action>(CloseAllNotifications)
let g:WhichKeyDesc_close_notifications = "<leader>xn Close Notifications"

nmap <leader>xo <Action>(CloseAllEditorsButActive)
let g:WhichKeyDesc_close_other_tabs = "<leader>x Close Other Tabs"

nmap <leader>xt <Action>(HideActiveWindow)
let g:WhichKeyDesc_close_tool = "<leader>xt Close Tool"


" Refactoring commands
let g:WhichKeyDesc_refactor = "<leader>r Refactor"

nmap <leader>rc <Action>(ReformatCode)
let g:WhichKeyDesc_refactor_reformat_code = "<leader>r Refactor Reformat Code"

nmap <leader>re <Action>(RenameElement)
let g:WhichKeyDesc_refactor_rename_element = "<leader>re Refactor Rename Element"

nmap <leader>rf <Action>(RenameFile)
let g:WhichKeyDesc_refactor_rename_file = "<leader>rf Refactor Rename File"

nmap <leader>rm <Action>(ExtractMethod)
let g:WhichKeyDesc_refactor_extract_method = "<leader>rm Refactor Extract Method"

nmap <leader>ri <Action>(ExtractInterface)
let g:WhichKeyDesc_refactor_extract_interface = "<leader>ri Refactor Extract Interface"

nmap <leader>rv <Action>(IntroduceVariable)
let g:WhichKeyDesc_refactor_introduce_variable = "<leader>rv Refactor Introduce Variable"

nmap <leader>rp <Action>(IntroduceParameter)
let g:WhichKeyDesc_refactor_introduce_parameter = "<leader>rp Refactor Introduce Parameter"


" LSP commands
let g:WhichKeyDesc_lsp = "<leader>l LSP"

nmap <leader>lh <Action>(ShowHoverInfo)
let g:WhichKeyDesc_lsp_hover_info = "<leader>lh Show Hover Info"

nmap <leader>ld <Action>(ShowErrorDescription)
let g:WhichKeyDesc_lsp_show_error = "<leader>ld Show Error"

nmap <leader>lD <Action>(ActivateProblemsViewToolWindow)
let g:WhichKeyDesc_lsp_show_all_errors = "<leader>lD Show All Errors"

nmap <leader>lu <Action>(ShowUsages)
let g:WhichKeyDesc_lsp_show_usages = "<leader>lD Show Usages"

" Debugger commands
let g:WhichKeyDesc_debug = "<leader>d Debugger"

nmap <leader>dt <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_debug_toggle_breakpoint = "<leader>dt Toggle Break Point"

nmap <leader>de <Action>(ToggleBreakpointEnabled)
let g:WhichKeyDesc_debug_toggle_breakpoint_enabled = "<leader>dt Toggle Break Point Enabled"

nmap <leader>ds <Action>(Run)
let g:WhichKeyDesc_debug_start = "<leader>dr Run (Start)"

nmap <leader>dd <Action>(Debug)
let g:WhichKeyDesc_debug_debug = "<leader>dd Debug Run"

nmap <leader>dr <Action>(Resume)
let g:WhichKeyDesc_debug_resume = "<leader>dr Toggle Break Point"

nmap <leader>ds <Action>(Stop)
let g:WhichKeyDesc_debug_stop = "<leader>ds Debug Stop"


" Open commands
let g:WhichKeyDesc_open = "<leader>o Open"

nmap <leader>ot <Action>(ActivateTerminalToolWindow)
let g:WhichKeyDesc_open_terminal = "<leader>ot Open Terminal Window"

nmap <leader>oT <Action>(Terminal.OpenInTerminal)
let g:WhichKeyDesc_open_in_terminal = "<leader>oT Open in Terminal"

" Open and close reference panes
nmap <c-\> <Action>(SplitVertically)
nmap <c--> <Action>(SplitHorizontally)
nmap <c-=> <Action>(Unsplit)

" Hide/ show extra info when grokking
let g:WhichKeyDesc_zoom_all = "<leader>z Zoom All"
let g:WhichKeyDesc_zoom = "z Zoom"

nmap zc <Action>(CollapseRegion)
let g:WhichKeyDesc_zoom_collapse_region = "zc Zoom Collapse Region"

nmap zo <Action>(ExpandRegion)
let g:WhichKeyDesc_zoom_open_region = "zo Zoom Open Region"

nmap zz <Action>(ExpandCollapseToggleAction)
let g:WhichKeyDesc_zoom_toggle_region = "zo Zoom Toggle Region"

nmap <leader>zc <Action>(CollapseAllRegions)
let g:WhichKeyDesc_zoom = "<leader>zc Zoom Collapse All Regions"

nmap <leader>zo <Action>(ExpandAllRegions)
let g:WhichKeyDesc_zoom = "<leader>zo Zoom Open All Regions"

nmap <leader>zz <Action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_zoom_distraction_free = "<leader>zz Zoom Distraction Free"


" Bookmark commands
let g:WhichKeyDesc_bookmark = "<leader>b Bookmark"

nmap <leader>bt <Action>(ToggleBookmark)
let g:WhichKeyDesc_bookmark_toggle = "<leader>bt Bookmark Toggle"

nmap <leader>bs <Action>(ShowBookmarks)
let g:WhichKeyDesc_bookmark_show = "<leader>bs Bookmark Show"

nmap <leader>bn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmark_goto_next = "<leader>bn Bookmark Go To Next"

nmap <leader>bp <Action>(GotoPreviousBookmark)
let g:WhichKeyDesc_bookmark_goto_previous = "<leader>bp Bookmark Go To Previous"

map H ^
map L $
map J }
map K {

map <leader>h <Action>(EditorCodeBlockStart)
map <leader>l <Action>(EditorCodeBlockEnd)

" Editing
nmap <leader>c <Action>(CommentByLineComment)
let g:WhichKeyDesc_comment_line = "<leader>c Comment Line"

nmap <leader>C <Action>(CommentByBlockComment)
let g:WhichKeyDesc_comment_block = "<leader>C Comment Block"

nmap <leader>i <Action>(JumpToLastChange)

" Testing commands
let g:WhichKeyDesc_test = "<leader>t Test"

nmap <leader>tr <Action>(RerunTests)
let g:WhichKeyDesc_test_run = "<leader>tr Test Rerun"

nmap <leader>tf <Action>(RerunFailedTests)
let g:WhichKeyDesc_test_run_failed = "<leader>tf Test Rerun Failed"

nmap <leader>tc <Action>(RunCoverage)
let g:WhichKeyDesc_test_run_coverage = "<leader>tc Test Run Coverage"

nmap <leader>tg <Action>(GotoTest)
let g:WhichKeyDesc_test_goto = "<leader>tg Test GoTo"
